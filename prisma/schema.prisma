generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Player {
  id               String             @id @unique @default(cuid())
  name             String             @unique
  version          Int                @default(1)
  faction          faction            @default(USEC)
  level            Int                @default(0)
  PlayerHasHideout PlayerHasHideout[]
  PlayerHasTasks   PlayerHasTasks[]
  PlayerHasTrader  PlayerHasTrader[]
}

model PlayerHasTrader {
  traderId String
  playerId String
  level    Int    @default(1)
  player   Player @relation(fields: [playerId], references: [id])
  trader   Trader @relation(fields: [traderId], references: [id])

  @@id([playerId, traderId])
}

model Trader {
  id               String             @id @unique @default(cuid())
  name             String
  wiki             String?
  HideoutReqTrader HideoutReqTrader[]
  PlayerHasTrader  PlayerHasTrader[]
  Task             Task[]
}

model Map {
  id        String      @id @unique @default(cuid())
  name      String
  wiki      String?
  TaskOnMap TaskOnMap[]
}

model Item {
  id              String            @id @unique @default(cuid())
  name            String
  shortName       String
  width           Int?
  height          Int?
  wiki            String?
  image           String?
  HideoutReqItem  HideoutReqItem[]
  ItemHasType     ItemHasType[]
  TaskReqItem     TaskReqItem[]
  TaskReqKey      TaskReqKey[]
  TaskRewardsItem TaskRewardsItem[]
}

model ItemType {
  id          String        @id @unique @default(cuid())
  name        String        @unique
  ItemHasType ItemHasType[]
}

model Task {
  id               String             @id @unique @default(cuid())
  name             String
  experience       Int
  wiki             String
  minPlayerLevel   Int
  faction          faction            @default(Any)
  forKappa         Boolean
  traderId         String
  trader           Trader             @relation(fields: [traderId], references: [id])
  PlayerHasTasks   PlayerHasTasks[]
  TaskHasObjective TaskHasObjective[]
  TaskOnMap        TaskOnMap[]
  TaskReqItem      TaskReqItem[]
  TaskReqKey       TaskReqKey[]
  Requires         TaskReqTask[]      @relation("Requires")
  Tasks            TaskReqTask[]      @relation("Tasks")
  TaskRewardsItem  TaskRewardsItem[]
}

model TaskReqTask {
  taskId     String
  requiresId String
  requires   Task   @relation("Requires", fields: [requiresId], references: [id])
  task       Task   @relation("Tasks", fields: [taskId], references: [id])

  @@id([taskId, requiresId])
}

model ItemHasType {
  id         String   @id @unique @default(cuid())
  itemTypeId String
  itemId     String
  item       Item     @relation(fields: [itemId], references: [id])
  type       ItemType @relation(fields: [itemTypeId], references: [id])
}

model Hideout {
  id             String           @id @unique @default(cuid())
  name           String           @unique
  HideoutStation HideoutStation[]
}

model HideoutStation {
  id               String              @id @unique @default(cuid())
  level            Int
  constructionTime Int
  hideoutId        String
  Hideout          Hideout             @relation(fields: [hideoutId], references: [id])
  RequiresStation  HideoutReqHideout[] @relation("RequiresStation")
  Stations         HideoutReqHideout[] @relation("Stations")
  HideoutReqItem   HideoutReqItem[]
  HideoutReqSkill  HideoutReqSkill[]
  HideoutReqTrader HideoutReqTrader[]
  PlayerHasHideout PlayerHasHideout[]
}

model HideoutReqHideout {
  stationId  String
  requiresId String
  requires   HideoutStation @relation("RequiresStation", fields: [requiresId], references: [id])
  station    HideoutStation @relation("Stations", fields: [stationId], references: [id])

  @@id([stationId, requiresId])
}

model Skill {
  id              String            @id @unique @default(cuid())
  name            String            @unique
  HideoutReqSkill HideoutReqSkill[]
}

model HideoutReqItem {
  count            Int
  id               String         @id @unique @default(cuid())
  itemId           String
  hideoutStationId String
  hideoutStation   HideoutStation @relation(fields: [hideoutStationId], references: [id])
  item             Item           @relation(fields: [itemId], references: [id])
}

model HideoutReqSkill {
  level            Int
  id               String         @id @unique @default(cuid())
  skillId          String
  hideoutStationId String
  hideoutStation   HideoutStation @relation(fields: [hideoutStationId], references: [id])
  skill            Skill          @relation(fields: [skillId], references: [id])
}

model HideoutReqTrader {
  id               String         @id @unique @default(cuid())
  level            Int
  traderId         String
  hideoutStationId String
  hideoutStation   HideoutStation @relation(fields: [hideoutStationId], references: [id])
  trader           Trader         @relation(fields: [traderId], references: [id])
}

model PlayerHasHideout {
  id               String         @id @unique @default(cuid())
  completed        Boolean        @default(false)
  playerId         String
  hideoutStationId String
  hideoutStation   HideoutStation @relation(fields: [hideoutStationId], references: [id])
  player           Player         @relation(fields: [playerId], references: [id])
}

model TaskOnMap {
  id     String @id @unique @default(cuid())
  taskId String
  mapId  String
  map    Map    @relation(fields: [mapId], references: [id])
  task   Task   @relation(fields: [taskId], references: [id])
}

model TaskReqKey {
  id     String @id @unique @default(cuid())
  taskId String
  itemId String
  key    Item   @relation(fields: [itemId], references: [id])
  task   Task   @relation(fields: [taskId], references: [id])
}

model TaskRewardsItem {
  count  Int
  id     String @id @unique @default(cuid())
  taskId String
  itemId String
  item   Item   @relation(fields: [itemId], references: [id])
  task   Task   @relation(fields: [taskId], references: [id])
}

model TaskReqItem {
  id          String  @id @unique @default(cuid())
  count       Int
  foundInRaid Boolean
  itemId      String
  taskId      String
  item        Item    @relation(fields: [itemId], references: [id])
  task        Task    @relation(fields: [taskId], references: [id])
}

model TaskHasObjective {
  id          String   @id @unique @default(cuid())
  description String
  optional    Boolean?
  taskId      String
  task        Task     @relation(fields: [taskId], references: [id])
}

model PlayerHasTasks {
  id        String  @id @unique @default(cuid())
  completed Boolean @default(false)
  playerId  String
  taskId    String
  player    Player  @relation(fields: [playerId], references: [id])
  task      Task    @relation(fields: [taskId], references: [id])
}

enum faction {
  USEC
  BEAR
  Any
}
